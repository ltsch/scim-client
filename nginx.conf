events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Handle static files - strict no-cache for development
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header ETag "";
            add_header Last-Modified "";
            try_files $uri =404;
        }

        # Handle HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # API proxy for CORS
        location /api/ {
            proxy_pass http://127.0.0.1:8002/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Ensure Authorization header is forwarded to the Python proxy
            proxy_set_header Authorization $http_authorization;
            # Forward common X- headers (nginx doesn't support dynamic header forwarding)
            proxy_set_header X-Cerby-Base-Url $http_x_cerby_base_url;
            proxy_set_header X-Custom-Header $http_x_custom_header;
            proxy_set_header X-API-Version $http_x_api_version;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_set_header X-Correlation-ID $http_x_correlation_id;
            proxy_set_header X-User-ID $http_x_user_id;
            proxy_set_header X-Session-ID $http_x_session_id;
            proxy_set_header X-Client-ID $http_x_client_id;
            proxy_set_header X-Environment $http_x_environment;
            proxy_set_header X-Feature-Flag $http_x_feature_flag;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # CORS proxy - preserves full URI including /proxy/ prefix
        # Uses $request_uri to maintain the complete path structure
        # Example: /proxy/https://api.example.com/endpoint -> /proxy/https://api.example.com/endpoint
        # This ensures the Python proxy receives the expected /proxy/ prefix for validation
        # Reference: https://dev.to/danielkun/nginx-everything-about-proxypass-2ona
        location /proxy/ {
            proxy_pass http://127.0.0.1:8002$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Ensure Authorization header is forwarded to the Python proxy
            proxy_set_header Authorization $http_authorization;
            # Forward common X- headers (nginx doesn't support dynamic header forwarding)
            proxy_set_header X-Cerby-Base-Url $http_x_cerby_base_url;
            proxy_set_header X-Custom-Header $http_x_custom_header;
            proxy_set_header X-API-Version $http_x_api_version;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_set_header X-Correlation-ID $http_x_correlation_id;
            proxy_set_header X-User-ID $http_x_user_id;
            proxy_set_header X-Session-ID $http_x_session_id;
            proxy_set_header X-Client-ID $http_x_client_id;
            proxy_set_header X-Environment $http_x_environment;
            proxy_set_header X-Feature-Flag $http_x_feature_flag;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Default location - serve index.html for SPA routing
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
} 